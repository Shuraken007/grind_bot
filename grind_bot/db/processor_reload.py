from .processor_core import DbProcessorCore, with_session

class DbProcessorReload(DbProcessorCore):
   @with_session
   def add_item(self, hash):
      return self.add_obj(
         self.engine.m.Item,
         hash,
         should_all_pk_exists = False # only on primary_key 'id' autogenerated
      )
   
   @with_session
   def get_item(self, item_id):
      return self.s.query(self.engine.m.Item).filter(
          self.engine.m.Item.id == item_id
      ).first()

   @with_session
   def delete_item(self, item_id):
      return self.delete_obj(
         self.engine.m.Item,
         {'id': item_id}
      )
   
   @with_session
   def get_items_by_user(self, user_id):
      return self.s.query(self.engine.m.Item).filter(
          self.engine.m.Item.user_id == user_id
      ).order_by(
         self.engine.m.Item.time.desc()
      ).all()
   
   @with_session
   def get_last_added_item_by_user(self, user_id):
      return self.s.query(self.engine.m.Item).filter(
          self.engine.m.Item.user_id == user_id
      ).order_by(
         self.engine.m.Item.time.desc()
      ).first()
      

   @with_session
   def add_bonus(self, hash):
      return self.add_or_modify_obj(
         self.engine.m.Bonus,
         hash
      )

   @with_session
   def delete_bonus(self, item_id):
      return self.delete_obj(
         self.engine.m.Bonus,
         {'id': item_id}
      )
   
   @with_session
   def get_bonuses_by_item(self, item_id):
      return self.s.query(self.engine.m.Bonus).filter(
          self.engine.m.Bonus.item_id == item_id
      ).all()